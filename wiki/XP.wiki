#summary Экстремальное программирование (группа 1).

= Экстремальное программирование =

<wiki:toc max_depth="2" />

*Экстрема́льное программи́рование* (англ. _Extreme Programming, XP_) — одна из гибких методологий разработки программного обеспечения. Авторы методологии — Кент Бек, Уорд Каннингем, Мартин Фаулер и другие.

= Основные приемы ХР =

Двенадцать основных приёмов экстремального программирования (по первому изданию книги _Extreme programming explained_) могут быть объединены в четыре группы:

|| *Короткий цикл обратной связи (Fine scale feedback)* || *Непрерывный, а не пакетный процесс* || *Понимание, разделяемое всеми* || *Социальная защищенность программиста (Programmer welfare):* ||
|| _Разработка через тестирование (Test driven development)_ || _Непрерывная интеграция (Continuous Integration)_ || _Простота (Simple design)_ || _40-часовая рабочая неделя (Sustainable pace, Forty hour week)_ ||
|| _Игра в планирование (Planning game)_ || _Рефакторинг (Design Improvement, Refactor)_ || _Метафора системы (System metaphor)_ || __ ||
|| _Заказчик всегда рядом (Whole team, Onsite customer)_ || _Частые небольшие релизы (Small Releases)_ || _Коллективное владение кодом (Collective code ownership) или выбранными шаблонами проектирования (Collective patterns ownership)_ || __ ||
|| _Парное программирование (Pair programming)_ || __ || _Стандарт кодирования (Coding standard or Coding conventions)_ || __ ||

= Расшифровка основных принципов =

|| *Тестирование* || В XP особое внимание уделяется двум разновидностям тестирования:  *тестирование модулей (unit testing)* и *приёмочное тестирование (acceptance testing)*. Разработчик не может быть уверен в правильности написанного им кода до тех пор, пока не сработают абсолютно все тесты модулей разрабатываемой им системы. Тесты модулей позволяют разработчикам убедиться в том, что их код работает корректно. ||
|| *Игра в планирование* || *Основная цель игры в планирование* — быстро сформировать приблизительный план работы и постоянно обновлять его по мере того, как условия задачи становятся всё более чёткими. Артефактами игры в планирование является набор бумажных карточек, на которых записаны пожелания заказчика (customer stories), и приблизительный план работы по выпуску следующих одной или нескольких небольших версий продукта. Критическим фактором, благодаря которому такой стиль планирования оказывается эффективным, является то, что в данном случае заказчик отвечает за принятие бизнес-решений, а команда разработчиков отвечает за принятие технических решений. Если не выполняется это правило, весь процесс распадается на части. ||
|| *Заказчик всегда рядом* || «Заказчик» в XP — это не тот, кто оплачивает счета, а конечный пользователь программного продукта. XP утверждает, что заказчик должен быть всё время на связи и доступен для вопросов. ||
|| *Парное программирование* || Парное программирование предполагает, что весь код создается парами программистов, работающих за одним компьютером. Один из них работает непосредственно с текстом программы, другой просматривает его работу и следит за общей картиной происходящего. При необходимости клавиатура свободно передается от одного к другому. В течение работы над проектом пары не фиксированы: рекомендуется их перемешивать, чтобы каждый программист в команде имел хорошее представление о всей системе. Таким образом, парное программирование усиливает взаимодействие внутри команды. ||
|| *Непрерывная интеграция* || Если вы будете выполнять интеграцию разрабатываемой системы достаточно часто, вы сможете избежать большей части связанных с этим проблем. В традиционных методиках интеграция, как правило, выполняется в самом конце работы над продуктом, когда считается, что все составные части разрабатываемой системы полностью готовы. В XP интеграция кода всей системы выполняется несколько раз в день, после того, как разработчики убедились в том, что все тесты модулей корректно срабатывают. ||
|| *Рефакторинг* || Рефакторинг (refactoring) — это методика улучшения кода, без изменения его функциональности. XP подразумевает, что однажды написанный код в процессе работы над проектом почти наверняка будет неоднократно переделан. Разработчики XP безжалостно переделывают написанный ранее код для того, чтобы улучшить его. Этот процесс называется рефакторингом. Отсутствие тестового покрытия провоцирует отказ от рефакторинга, в связи с боязнью поломать систему, что приводит к постепенной деградации кода. ||
|| *Частые небольшие релизы* || Версии (releases) продукта должны поступать в эксплуатацию как можно чаще. Работа над каждой версией должна занимать как можно меньше времени. При этом каждая версия должна быть достаточно осмысленной с точки зрения полезности для бизнеса. ||
|| *Простота дизайна* || XP исходит из того, что в процессе работы условия задачи могут неоднократно измениться, а значит, разрабатываемый продукт не следует проектировать заблаговременно целиком и полностью. Если в самом начале работы вы пытаетесь от начала и до конца детально спроектировать систему, вы напрасно тратите время. XP предполагает, что проектирование — это настолько важный процесс, что его необходимо выполнять постоянно в течение всего времени работы над проектом. Проектирование должно выполняться небольшими этапами, с учетом постоянно изменяющихся требований. В каждый момент времени мы пытаемся использовать наиболее простой дизайн, который подходит для решения текущей задачи. При этом мы меняем его по мере того как условия задачи меняются. ||
|| *Метафора системы* || Метафора системы (system metaphor) — это аналог того, что в большинстве методик называется архитектурой. Метафора системы дает команде представление о том, каким образом система работает в настоящее время, в каких местах добавляются новые компоненты и какую форму они должны принять. ||
|| *Стандарты кодирования* || Все члены команды в ходе работы должны соблюдать требования общих стандартов кодирования. Благодаря этому: члены команды не тратят время на глупые споры о вещах, которые фактически никак не влияют на скорость работы над проектом и обеспечивается эффективное выполнение остальных практик. ||
|| *Коллективное владение* || Коллективное владение означает, что каждый член команды несёт ответственность за весь исходный код. Таким образом, каждый вправе вносить изменения в любой участок программы. Парное программирование поддерживает эту практику: работая в разных парах, все программисты знакомятся со всеми частями кода системы. Важное преимущество коллективного владения кодом — в том, что оно ускоряет процесс разработки, поскольку при появлении ошибки её может устранить любой программист. ||
